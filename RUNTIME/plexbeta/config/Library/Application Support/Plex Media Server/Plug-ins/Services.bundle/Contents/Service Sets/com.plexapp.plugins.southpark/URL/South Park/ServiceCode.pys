MRSS_URL = 'http://%s/feeds/video-player/mrss/%s'
MGID = 'mgid:arc:episode:southparkstudios.com:%s'
NAMESPACES = {'media': 'http://search.yahoo.com/mrss/'}

RE_EP_DATA = Regex('\/s(?P<season>\d+)e(?P<episode>\d+)\-')
 
####################################################################################################
def NormalizeURL(url):

	return url.split('?')[0]

####################################################################################################
def MetadataObjectForURL(url):

	try:
		html = HTML.ElementFromURL(url, follow_redirects=False)
	except Ex.HTTPError, e:
		if e.code == 404:
			Log('HTTP 404 Not Found for URL: %s' % url)
			raise Ex.MediaNotAvailable
		else:
			raise Ex.MediaNotAvailable
	except Ex.RedirectError, e:
		if 'Location' in e.headers:
			if e.headers['Location'] == url:
				Log('Redirect loop for URL: %s' % url)
				raise Ex.MediaNotAvailable
			else:
				return URLService.MetadataObjectForURL(e.headers['Location'])
		else:
			raise Ex.MediaNotAvailable
	except:
		raise Ex.MediaNotAvailable

	title = html.xpath('//meta[@property="og:title"]/@content')[0].split(' (Season')[0]
	summary = html.xpath('//meta[@property="og:description"]/@content|//meta[@name="og:description"]/@content')[0]
	thumb = html.xpath('//meta[@property="og:image"]/@content')[0].split('?')[0].replace('_4x3.jpg', '_16x9.jpg')

	if '/full-episodes/' in url:
		ep_data = RE_EP_DATA.search(url).groupdict()
		season = ep_data['season']
		index = ep_data['episode']

		return EpisodeObject(
			title = title,
			show = "South Park",
			season = int(season),
			index = int(index),
			summary = summary,
			thumb = Resource.ContentsOfURLWithFallback(url=thumb)
		)
	else:
		return VideoClipObject(
			title = title,
			summary = summary,
			thumb = Resource.ContentsOfURLWithFallback(url=thumb)
		)

####################################################################################################
@deferred
def MediaObjectsForURL(url):

	html = HTML.ElementFromURL(url)
	mgid = html.xpath('//*[@id="player_page_player"]/@data-mgid')

	if len(mgid) < 1:
		try:
			mgid_num = html.xpath('//@data-now-playing')
			mgid = MGID %mgid_num
		except:
			Log('no mgid found')
			raise Ex.MediaNotAvailable
	else:
		mgid = mgid[0]

	host = url.split('/')[2]

	mrss_data = XML.ElementFromURL(MRSS_URL % (host, mgid))

	media_urls = mrss_data.xpath('//media:content[@medium="video"]/@url', namespaces=NAMESPACES)
	if len(media_urls) < 1:
		raise Ex.MediaNotAvailable

	available_streams = []

	for media_url in media_urls:

		try:
			hls_data = XML.ElementFromURL(media_url.replace('{device}', 'iPad'), cacheTime=CACHE_1HOUR)
		except:
			raise Ex.MediaNotAvailable

		# Skip parts that are too short and cause issues in some Plex players
		part_duration = hls_data.xpath('//rendition/@duration')[0]
		if int(part_duration) <8:
			continue
		# Create part for the video section
		part = {}
		part['duration'] = part_duration
		part['hls_url'] = hls_data.xpath('//rendition/src/text()')[0]
		available_streams.append(part)

		media_objects = []
		# Build media objects for hls videos
		parts = []
		for part in available_streams:
			parts.append(
				PartObject(
					key = HTTPLiveStreamURL(part['hls_url']),
					duration = int(part['duration'])*1000
				)
			)

		media_objects.append(
			MediaObject(
				parts = parts,
				protocol = 'hls',
				container = 'mpegts'
			)
		)

	return media_objects
