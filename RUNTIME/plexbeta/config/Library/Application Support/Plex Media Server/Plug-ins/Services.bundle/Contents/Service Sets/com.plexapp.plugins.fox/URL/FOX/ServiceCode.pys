RE_KEY_URI = Regex('URI *= *"(.*)"')
USER_AGENT = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/600.3.18 (KHTML, like Gecko) Version/8.0.3 Safari/600.3.18'

SERIES_URL = 'aHR0cDovL2ZlZWQudGhlcGxhdGZvcm0uY29tL2YvZm94LmNvbS9tZXRhZGF0YT9jb3VudD10cnVlJmJ5Q3VzdG9tVmFsdWU9e2Z1bGxFcGlzb2RlfXt0cnVlfSZieUNhdGVnb3JpZXM9U2VyaWVzLyVz'

##########################################################################################
def MetadataObjectForURL(url):

    try:
        html = HTML.ElementFromURL(url)
    except:
        raise Ex.MediaNotAvailable

    try:
        data = html.xpath("//script[@type='application/ld+json']/text()")[0]
        json = JSON.ObjectFromString(data)
    except:
        raise Ex.MediaNotAvailable

    title = json['name']
    summary = json['description']
    thumb = json['image'] if 'image' in json else None
    index = int(json['episodeNumber']) if json['episodeNumber'] is not None else None
    show = json['partOfSeries']['name']
    season = int(json['partOfSeason']['seasonNumber']) if json['partOfSeason']['seasonNumber'] is not None else None
    originally_available_at = Datetime.ParseDate(json['releasedEvent']['startDate'])

    return EpisodeObject(
        title = title,
        summary = summary,
        thumb = thumb,
        index = index,
        show = show,
        season = season,
        originally_available_at = originally_available_at
    )

###########################################################################################
@deferred
def MediaObjectsForURL(url):

    try:
        html = HTML.ElementFromURL(url)
    except:
        raise Ex.MediaNotAvailable

    data = html.xpath("//script[@type='application/ld+json']/text()")

    if len(data) < 1:
        raise Ex.MediaNotAvailable

    json = JSON.ObjectFromString(data[0])

    episode_id = json['@id']
    show = json['partOfSeries']['name']

    json_url = String.Decode(SERIES_URL) % String.Quote(show)
    json_data = JSON.ObjectFromURL(url = json_url)

    for episode in json_data['results']:
        if str(episode_id) != str(episode['id']):
            continue

        data = HTML.ElementFromURL(url = episode['videoURL'] + '&manifest=m3u')
        video_url = data.xpath("//video/@src")

        if len(video_url) < 1:
            exception = data.xpath("//param[@name='exception']/@value")

            if len(exception) < 1:
                raise Ex.MediaNotAvailable
            elif exception[0] == 'GeoLocationBlocked':
                raise Ex.MediaGeoblocked
            else:
                raise Ex.MediaNotAvailable

        mo = []

        if Client.Platform in ['Android', 'iOS', 'Roku', 'Safari', 'tvOS', 'Mystery 4', 'Konvergo']:
            return [
                MediaObject(
                    video_resolution = 720,
                    audio_channels = 2,
                    parts = [
                        PartObject(
                            key = HTTPLiveStreamURL(url = video_url[0])
                        )
                    ],
                )
            ]
        else:
            return [
                MediaObject(
                    video_resolution = video_resolution,
                    audio_channels = 2,
                    parts = [
                        PartObject(
                            key =
                                HTTPLiveStreamURL(
                                    Callback(
                                        PlayVideo,
                                        url = video_url[0],
                                        video_resolution = video_resolution
                                    )
                            )
                        )
                    ],
                ) for video_resolution in ['720', '576', '360', '270', '226']
            ]

    raise Ex.MediaNotAvailable

##########################################################################################
def PlayVideo(url, video_resolution = '720', **kwargs):

    hls_url = GetSpecificResolutionURL(url, video_resolution)

    # Use "proxy" for clients like PHT(lack of SSL support)
    return Redirect(
        Callback(CreatePatchedPlaylist, url = hls_url, cookies = HTTP.CookiesForURL(url))
    )

##########################################################################################
def GetSpecificResolutionURL(url, video_resolution):

    streams = GetHLSStreams(url)
    hls_url = None

    min_diff_found = 10000000 # Some huge number to get it started
    for stream in streams:
        if 'resolution' in stream:
            diff = abs(stream['resolution'] - int(video_resolution))

            if diff < min_diff_found:
                hls_url = stream['url']
                min_diff_found = diff

    if not '?' in hls_url:
        # Samsung requires an arbitrary parameter in the stream url since
        # '&' is always appended by that client ...
        hls_url = hls_url + '?null='

    return hls_url

##########################################################################################
def GetHLSStreams(url):

    headers = {}
    headers['User-Agent'] = USER_AGENT

    streams = []

    try:
        playList = HTTP.Request(url, headers = headers, cacheTime = 0).content
    except:
        raise Ex.MediaNotAvailable

    # Parse the m3u8 file to get:
    # - URL
    # - Resolution
    # - Bitrate
    for line in playList.splitlines():
        if "BANDWIDTH" in line:
            stream = {}
            stream['bitrate'] = int(Regex('(?<=BANDWIDTH=)[0-9]+').search(line).group(0))

            if "RESOLUTION" in line:
                stream['resolution'] = int(Regex('(?<=RESOLUTION=)[0-9]+x[0-9]+').search(line).group(0).split("x")[1])

            if not 'resolution' in stream:
                stream['resolution'] = int(BitrateToResolution(stream['bitrate']))

        elif "m3u8" in line:
            path = ''

            if not line.startswith("http"):
                path = url[ : url.rfind('/') + 1]

            try:
                stream['url'] = path + line
                streams.append(stream)
            except:
                pass

    sorted_streams = sorted(streams, key = lambda stream: stream['bitrate'], reverse = True)

    return sorted_streams

##########################################################################################
def BitrateToResolution(bitrate):

    if bitrate >= 1924000:
        return 720
    elif bitrate >= 1424000:
        return 576
    elif bitrate >= 892000:
        return 360
    elif bitrate >= 392000:
        return 270
    else:
        return 226

####################################################################################################
def CreatePatchedPlaylist(url, cookies):

    headers = {}
    headers['Cookie'] = cookies
    headers['User-Agent'] = USER_AGENT

    original_playlist = HTTP.Request(url, headers = headers, cacheTime = 0).content
    path = path = url[ : url.rfind('/') + 1]
    new_playlist = ''

    for line in original_playlist.splitlines():
        if line.startswith('#EXT-X-KEY'):
            original_key_url = RE_KEY_URI.search(line).groups()[0]
            new_key_url = Callback(ContentOfURL, url = original_key_url, cookies = cookies)
            new_playlist = new_playlist + line.replace(original_key_url, new_key_url) + '\n'
        elif line.startswith('http') or '.ts' in line:
            original_segment_url = line
            new_segment_url = Callback(ContentOfURL, url = original_segment_url, cookies = cookies)
            new_playlist = new_playlist + new_segment_url + '\n'
        else:
            new_playlist = new_playlist + line + '\n'

    return new_playlist

####################################################################################################
def ContentOfURL(url, cookies):

    headers = {}
    headers['Cookie'] = cookies
    headers['User-Agent'] = USER_AGENT

    try:
        content = HTTP.Request(url, headers=headers, cacheTime=0).content
    except Ex.HTTPError, e:
        if e.code == 403:
            raise Ex.MediaNotAuthorized
        else:
            raise Ex.MediaNotAvailable
    except:
        raise Ex.MediaNotAvailable

    return content
