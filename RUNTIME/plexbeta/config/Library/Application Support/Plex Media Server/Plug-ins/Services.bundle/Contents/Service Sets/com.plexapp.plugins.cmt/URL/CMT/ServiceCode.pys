# Variables for Vevo Music videos
VEVO_URL = 'http://www.vevo.com/watch/%s/%s/%s'
RE_VEVO_URL_PATH = Regex('http://www\.(?:mtv|cmt)\.com/videos?/([^/]+)/\d+/(.+?)\.jhtml')
RE_VEVO_ID = Regex("MTVN.VIDEO.isrc = '(.+?)';")
RE_VEVO = Regex("MTVN.VIDEO.isVevo = (true|false);")

MRSS_URL = "http://www.cmt.com/sitewide/apps/player/embed/rss/?uri=%s" 
RE_URI = Regex("MTVN.VIDEO.contentUri = '(.+?)';")
NAMESPACES = {'media': 'http://search.yahoo.com/mrss/'}

RE_EPISODE = Regex('(\d{3,4})')

####################################################################################################
def NormalizeURL(url):

    if url.endswith('#id='):
        url = url.split('#id=')[0]

    return url

####################################################################################################
def MetadataObjectForURL(url):

    vevo_url = VevoURL(url)
    if vevo_url:
        return URLService.MetadataObjectForURL(vevo_url)
        
    data = GetRSS(url)
    title = data.xpath('//channel/title/text()', namespaces=NAMESPACES)[0]
    try: summary = data.xpath('//channel/description/text()', namespaces=NAMESPACES)[0]
    except: summary = ''
    try: thumb = data.xpath('//channel/image/url/text()', namespaces=NAMESPACES)[0]
    except: thumb = data.xpath('//item/image/@url', namespaces=NAMESPACES)[0]
    duration = 0
    media_urls = data.xpath('//media:content[@medium="video"]', namespaces=NAMESPACES)

    for segment in media_urls:
        if segment.get('duration') != "":
            if ':' in segment.get('duration'):
                duration += Datetime.MillisecondsFromString(segment.get('duration'))
            else:
                duration += int(float(segment.get('duration'))*1000)
    try:
        air_date = data.xpath('//pubDate/text()')[0]
        originally_available_at = Datetime.ParseDate(air_date)
    except:
        originally_available_at = None

    if 'playlist' in url or 'full-episode' in url:

        show = data.xpath('//media:category[@scheme="urn:mtvn:franchise"]/text()', namespaces=NAMESPACES)[0]
        try: episode = RE_URI.search(title).group(1)
        except: episode = '0'
        if episode:
            if len(episode)>2:
                season = episode[0]+episode[1]
            else:
                season = episode[0]
        else:
            season = '0'

        return EpisodeObject(
            show = show,
            season = int(season),
            index = int(episode),
            title = title,
            summary = summary,
            duration = duration,
            thumb = Resource.ContentsOfURLWithFallback(url=thumb),
            originally_available_at = originally_available_at
        )

    else:

        return VideoClipObject(
            title = title,
            summary = summary,
            duration = duration,
            thumb = Resource.ContentsOfURLWithFallback(url=thumb),
            originally_available_at = originally_available_at
        )

####################################################################################################
@deferred
def MediaObjectsForURL(url):

    vevo_url = VevoURL(url)
    if vevo_url:
        return URLService.MetadataObjectForURL(vevo_url)
        
    else:
        mrss_data = GetRSS(url)
        media_urls = mrss_data.xpath('//media:content[@medium="video"]/@url', namespaces=NAMESPACES)
        available_streams = {}
        
        for media_url in media_urls:

            try:
                video_data = XML.ElementFromURL(media_url, cacheTime=CACHE_1HOUR)
            except:
                raise Ex.MediaNotAvailable

            renditions = video_data.xpath('//rendition[@type="video/mp4"]')

            if len(renditions) < 1:
                raise Ex.MediaNotAvailable

            for rendition in renditions:

                rtmp_url = rendition.xpath('./src/text()')[0]
                height = rendition.get('height')

                if height not in available_streams:
                    available_streams[height] = []

                # Create part for the video section
                part = {}
                part['duration'] = rendition.get('duration')
                part['rtmp_url'] = rtmp_url.split('/viacomcmtstrm/')[1]

                available_streams[height].append(part)

        media_objects = []
        res_list = [int(i) for i in available_streams.keys()]
        res_list.sort(reverse=True)

        for resolution in res_list:

            parts = []

            for part in available_streams[str(resolution)]:

                parts.append(
                    PartObject(
                        key = RTMPVideoURL(
                            url='rtmpe://viacommtvstrmfs.fplive.net:1935/viacommtvstrm/',
                            clip='mp4:%s' %(part['rtmp_url'])
                        ),
                        duration = int(part['duration'])*1000
                    )
                )


            media_objects.append(
                MediaObject(
                    parts = parts,
                    video_resolution = resolution,
                    audio_channels = 2,
                    video_codec = VideoCodec.H264,
                    audio_codec = AudioCodec.AAC
                )
            )

        return media_objects

##################################################################################################
# This is a function to check for Vevo video IDs and build the Vevo url
def VevoURL(url):

    try:
        content = HTTP.Request(url).content
        html = HTML.ElementFromString(content)
    except:
        raise Ex.MediaNotAvailable

    # First check to see if it is a Vevo video
    # (Even if it is not a Vevo video, it will provide an empty Vevo id field)
    try: vevo = RE_VEVO.search(content).group(1).lower()
    except: vevo = 'false'

    # If Vevo build a Vevo url
    if vevo=='true':
        id = RE_VEVO_ID.search(content).group(1)
        local_url = html.xpath('//meta[@property="og:url"]/@content')[0]
        (artist, title) = RE_VEVO_URL_PATH.search(local_url).groups()
        vevo_url = VEVO_URL % (artist, title, id)
    else:
        vevo_url = None

    #Log(' the value of vevo_url is %s' %vevo_url)
    return vevo_url

####################################################################################################
# Get the uri and produce the RSS xml page 
def GetRSS(url):

    try:
        content = HTTP.Request(url).content
        html = HTML.ElementFromString(content)
    except:
        raise Ex.MediaNotAvailable

    try: uri = RE_URI.search(content).group(1)
    except: uri = None

    # Check which host to use
    if uri:
        try: xml = XML.ElementFromURL(MRSS_URL %uri)
        except: raise Ex.MediaNotAvailable
    else:
        Log('there is not mgid')
        raise Ex.MediaNotAvailable

    if len(xml.xpath('//media:content[@medium="video"]', namespaces=NAMESPACES)) < 1:
        Log('there is no media in this feed')
        raise Ex.MediaNotAvailable
    else:
        return xml
